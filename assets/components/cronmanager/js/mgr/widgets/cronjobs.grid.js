/** * Cron jobs grid * * @class CronManager.grid.CronJobs * @extends MODx.grid.Grid * @param config * @xtype cronmanager-grid-cronjobs */CronManager.grid.CronJobs = function(config) {    config = config || {};    this.snippetTpl = new Ext.Template('<div>{snippet_name} - <i><small>{snippet_description}</small></i></div>');    this.rowContent = new Ext.ux.grid.RowPanelExpander({        expandOnDblClick: false        ,createExpandingRowPanelItems: function(record, rowIndex) {            var grid = this.grid;            return [                new CronManager.panel.JobPanel({                    grid: grid                    ,record: record                    ,rowIndex: rowIndex                })            ];        }    });    Ext.applyIf(config, {        url: CronManager.config.connectorUrl        ,baseParams: {            action: 'mgr/cronjobs/getList'        }        ,save_action: 'mgr/cronjobs/updateFromGrid'        ,autosave: true        ,fields: ['id','snippet','snippet_name','properties','minutes','nextrun','lastrun','active','sortorder','snippet_description', 'logs']        ,plugins: [this.rowContent]        ,paging: true        ,remoteSort: true        ,anchor: '100%'        ,autoExpandColumn: 'snippet'        ,emptyText: _('cronmanager.norecords')        ,columns: [{            header: _('id')            ,dataIndex: 'id'            ,sortable: true            ,hidden: true        }, this.rowContent,{            header: _('cronmanager.snippet')            ,dataIndex: 'snippet_name'            ,sortable: true            ,renderer: function(value, meta, record) {                return this.snippetTpl.apply(record.data);            }            ,scope: this        },{            header: _('cronmanager.minutes')            ,dataIndex: 'minutes'            ,width: 120            ,fixed: true            ,editor: {                xtype: 'numberfield'                ,minValue: 1                ,description: _('cronmanager.minutes_desc')                ,allowNegative: false            }            ,menuDisabled: true        },{            header: _('cronmanager.lastrun')            ,dataIndex: 'lastrun'            ,fixed: true            ,width: 150            ,menuDisabled: true        },{            header: _('cronmanager.nextrun')            ,dataIndex: 'nextrun'            ,fixed: true            ,width: 150            ,editor: {                xtype: 'xdatetime'                ,dateFormat: MODx.config.manager_date_format                ,timeFormat: MODx.config.manager_time_format            }            ,menuDisabled: true        },{            header: _('cronmanager.logs_entries')            ,dataIndex: 'logs'            ,fixed: true            ,menuDisabled: true        },{            header: _('cronmanager.active')            ,dataIndex: 'active'            ,fixed: true            ,renderer: this.rendYesNo            ,editor: { xtype: 'combo-boolean' }            ,menuDisabled: true        }],        tbar:[{            text: _('cronmanager.create')            ,handler: {                xtype: 'cronmanager-window-create'                ,blankValues: true            }        }]        ,listeners: {            afterlayout: function() {                // Workaround to resize the content                this.resizeJobPanel();            }        }    });    CronManager.grid.CronJobs.superclass.constructor.call(this, config);    this.getSelectionModel().on('beforerowselect', function() {        // Prevent row selection because of nested grids        return false;    });    this.rowContent.on('expand', this.resizeJobPanel, this);    //this.getStore().on('load', this.collapseTrigger, this);};Ext.extend(CronManager.grid.CronJobs, MODx.grid.Grid, {    // Mark all columns as not expanded when the store is (re) loaded    collapseTrigger: function() {        var aRows = this.getView().getRows();        for (var i = 0; i < aRows.length; i++) {            Ext.fly(aRows[i]).replaceClass('x-grid3-row-expanded', 'x-grid3-row-collapsed');        }    }    // Workaround to resize the panels    ,resizeJobPanel: function() {        var width = this.getWidth()            ,panels = this.rowContent.expandingRowPanel;        if (panels && panels.length > 0) {            Ext.each(panels, function(panel, idx, list) {                if (undefined === panel || null === panel) return '';                panel.setWidth(width - 32);            })        }    }});Ext.reg('cronmanager-grid-cronjobs', CronManager.grid.CronJobs);/** * Cron job update window * * @class CronManager.window.Update * @extends CronManager.window.Create * @param config * @xtype cronmanager-window-update */CronManager.panel.JobPanel = function(config) {    config = config || {};    //console.log(config.record);    Ext.applyIf(config, {        plain: true        ,border: false        ,activeTab: 0        ,layoutOnTabChange: true        ,forceLayout: true        ,cls: 'trackme'        ,defaults: {            autoHeight: true            ,border: false            ,cls: 'tab_content'//            ,style: {//                background: 'blue'//            }            ,layout: 'anchor'        }        ,items:[{            title: '~>'            ,disabled: true            ,style: {                padding: 0                ,color: '#000'            }        },{            title: _('cronmanager.update')            ,loadAction: 'showEditPanel'        },{            title: _('cronmanager.viewlog')            ,loadAction: 'showLogPanel'            ,hidden: true        },{            title: _('cronmanager.run_now')            ,loadAction: 'showRunPanel'        },{            title: _('cronmanager.remove')            ,loadAction: 'showRemovePanel'        }]        ,listeners: {            tabchange: function(elem, tab) {                if (tab.disabled) return '';                tab.removeAll();                elem.ctiveTabIdx = elem.items.findIndex('id', tab.id);                var action = tab.loadAction;                if (action && 'function' == typeof this[action]) {                    tab.add(this[action]());                    tab.doLayout();                }            }            ,scope: this        }    });    CronManager.panel.JobPanel.superclass.constructor.call(this, config);};Ext.extend(CronManager.panel.JobPanel, Ext.TabPanel, {    // "false" close tab    closePanel: function() {        this.setActiveTab(0);    }    // Edit cron details panel    ,showEditPanel: function() {        return new CronManager.panel.EditCron({            record: this.record            ,grid: this.grid            ,tabPanel: this        });    }    // Logs panel    ,showLogPanel: function() {        if (this.record.data.logs <= 0) {            return {                html: 'No logs'                ,border: false            };        }        return new CronManager.grid.CronJobLog({            baseParams: {                action: 'mgr/cronjobs/getlog'                ,cronid: this.record.id            }            ,id: 'cronlogs-' + this.record.id            ,tabPanel: this        });    }    // Run cron job panel    ,showRunPanel: function() {        return new MODx.Panel({            layout: 'anchor'            ,tabPanel: this            ,items: [{                html: 'Execute this task right now ?'                ,border: false            },{                xtype: 'toolbar'                ,style: {                    background: 'transparent'                    ,border: '0 none transparent'                }                ,defaultType: 'button'                ,items: [{                    text: 'Execute'                    ,cls: 'green'                    ,handler: function() {                        var mask = new Ext.LoadMask(                            this.el                            ,{                                msg: 'Please waitâ€¦'                                ,removeMask: true                            }                        );                        mask.show();                        // Execute the selected job                        var exec = MODx.Ajax;                        exec.request({                            url: CronManager.config.connectorUrl                            ,params: {                                action: 'mgr/cronjobs/process'                                ,id: this.record.id                            }                        });                        exec.on('success', function(r) {                            console.log(r);                            this.record.data = r.object;                            this.record.commit();                           mask.hide();                        }, this);                    }                    ,scope: this                },{                    text: 'Cancel'                    ,handler: function() {                        this.closePanel();                    }                    ,scope: this                }]            }]        });    }    ,showRemovePanel: function() {        return [];        // Delete the selected entry//        ,removeCronJob: function() {//            MODx.msg.confirm({//                title: _('cronmanager.remove')//                ,text: _('cronmanager.remove_confirm', { snippet: '<b>'+ this.menu.record.snippet_name +'</b>' })//                ,url: this.config.url//                ,params: {//                    action: 'mgr/cronjobs/remove'//                    ,id: this.menu.record.id//                }//                ,listeners: {//                    success: {//                        fn: this.refresh//                        ,scope: this//                    }//                }//            });//        }    }});CronManager.panel.EditCron = function(config) {    config = config || {};    Ext.applyIf(config, {        url: CronManager.config.connectorUrl        ,baseParams: {            action: 'mgr/cronjobs/update'        }        ,baseCls: 'modx-formpanel'        ,labelAlign: 'top'        ,cls: 'container'        ,layout: 'form'        ,defaults: {            autoHeight: true            ,anchor: '100%'            ,allowBlank: false        }        ,items: [{            xtype: 'hidden'            ,name: 'id'        },{            xtype: 'cronmanager-combo-snippets'            ,fieldLabel: _('cronmanager.snippet')            ,name: 'snippet'        },{            xtype: 'numberfield'            ,fieldLabel: _('cronmanager.minutes')            ,description: _('cronmanager.minutes_desc')            ,name: 'minutes'            ,width: 60            ,value: 60            ,minValue: 1            ,allowNegative: false        },{            xtype: 'textarea'            ,fieldLabel: _('cronmanager.properties')            ,description: _('cronmanager.properties_desc')            ,name: 'properties'            ,allowBlank: true            ,grow: true        }]        ,bbar: new Ext.Toolbar({            style: {                background: 'transparent'                ,border: '0 none transparent'            }            ,defaultType: 'button'            ,items: ['->', {                text: _('save')                ,cls: 'green'                ,handler: function() {                    this.submit();                }                ,scope: this            }, '-',{                text: 'Cancel'                ,handler: function() {                    //console.log(this);                    this.ownerCt.ownerCt.setActiveTab(0);                }                ,scope: this            }]        })        ,listeners: {            setup: function() {                this.getForm().setValues(this.record.data);            }            ,success: function(r) {                var grid = this.grid                    ,idx = grid.getStore().find('id', this.record.id);                //console.log(r);                //console.log(this.record);                //console.log(grid.getStore().recordType);                //var record = grid.getStore().recordType.create(r.result.object);                //console.log(record);                this.record.data = r.result.object;                this.record.commit();/*                grid.refresh();                Ext.defer(function() {                    grid.rowContent.expandRow(idx);                }, 1000);*/            }            ,scope: this        }    });    CronManager.panel.EditCron.superclass.constructor.call(this, config);};Ext.extend(CronManager.panel.EditCron, MODx.FormPanel, {});/** * Cron job create window * * @class CronManager.window.Create * @extends MODx.Window * @param config * @xtype cronmanager-window-create */CronManager.window.Create = function(config) {    config = config || {};    Ext.applyIf(config, {        title: _('cronmanager.create')        ,url: CronManager.config.connectorUrl        ,baseParams: {            action: 'mgr/cronjobs/create'        }        ,formDefaults: {            anchor: '100%'            ,allowBlank: false        }        ,fields: [{            xtype: 'hidden'            ,name: 'id'        },{            xtype: 'cronmanager-combo-snippets'            ,fieldLabel: _('cronmanager.snippet')            ,name: 'snippet'        },{            xtype: 'numberfield'            ,fieldLabel: _('cronmanager.minutes')            ,description: _('cronmanager.minutes_desc')            ,name: 'minutes'            ,width: 60            ,value: 60            ,minValue: 1            ,allowNegative: false        },{            xtype: 'textarea'            ,fieldLabel: _('cronmanager.properties')            ,description: _('cronmanager.properties_desc')            ,name: 'properties'            ,allowBlank: true            ,grow: true            ,growMax: 200        }]        ,keys:[{            key: Ext.EventObject.ENTER            ,shift: true            ,fn: this.submit            ,scope: this        }]    });    CronManager.window.Create.superclass.constructor.call(this, config);};Ext.extend(CronManager.window.Create, MODx.Window);Ext.reg('cronmanager-window-create', CronManager.window.Create);