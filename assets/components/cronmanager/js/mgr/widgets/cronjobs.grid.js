// First step to abstractionCronManager.grid.AbstractGrid = function(config) {    config = config || {};    config.rowContent = config.rowContent || new Ext.ux.grid.RowPanelExpander({        expandOnDblClick: false        ,createExpandingRowPanelItems: function(record, rowIndex) {            return [];        }    });    Ext.applyIf(config, {        progressBars: []        ,plugins: [config.rowContent]        ,paging: true        ,remoteSort: true        ,anchor: '100%'        ,listeners: {            afterlayout: function() {                // Workaround to resize the content                this.resizeJobPanel();            }        }    });    CronManager.grid.AbstractGrid.superclass.constructor.call(this, config);    this._init();};Ext.extend(CronManager.grid.AbstractGrid, MODx.grid.Grid, {    /**     * Initialize the grid (mostly events)     *     * @private     */    _init: function() {        this.getSelectionModel().on('beforerowselect', function() {            // Prevent row selection because of nested grids            return false;        });        // Animations        this.rowContent.on('expand', function(exp, rec, body, rowIdx) {            this.resizeJobPanel();            exp.expandingRowPanel[rec.id].el.slideIn('t', {                duration: 0.2            });        }, this);        this.rowContent.on('beforecollapse', function(exp, rec, body, rowIdx) {            exp.expandingRowPanel[rec.id].el.slideOut('t', {                duration: 0.2                ,callback: function() {                    // Set as "collapsed" after the animation                    var row = exp.grid.view.getRow(rowIdx);                    exp.state[rec.id] = false;                    Ext.fly(row).replaceClass('x-grid3-row-expanded', 'x-grid3-row-collapsed');                    exp.grid.saveState();                    exp.fireEvent('collapse', exp, rec, body, rowIdx);                }            });            // Prevent immediate "collapsing"            return false;        }, this);    }    /**     * Mark all columns as not expanded when the store is (re) loaded     */    ,collapseTrigger: function() {        var aRows = this.getView().getRows();        for (var i = 0; i < aRows.length; i++) {            Ext.fly(aRows[i]).replaceClass('x-grid3-row-expanded', 'x-grid3-row-collapsed');        }    }    /**     * Workaround to resize the panels     */    ,resizeJobPanel: function() {        var width = this.getWidth()            ,panels = this.rowContent.expandingRowPanel;        if (panels && panels.length > 0) {            Ext.each(panels, function(panel, idx, list) {                if (undefined === panel || null === panel) return '';                panel.setWidth(width - 32);            })        }    }});CronManager.panel.BaseTabPanel = function(config) {    config = config || {};    //console.log(config.record);    Ext.applyIf(config, {        plain: true        ,border: false        ,activeTab: 0        ,layoutOnTabChange: true        ,forceLayout: true        ,cls: 'trackme'        ,defaults: {            autoHeight: true            ,border: false            ,cls: 'tab_content'            ,layout: 'anchor'        }        ,items: [{            title: '&#160;'            ,iconCls: 'glyph_actions'            ,disabled: true            ,style: {                padding: 0                ,color: '#000'            }        }, (config.panels ? config.panels : {})]        ,listeners: {            tabchange: function(elem, tab) {                this.activeTabIdx = elem.items.findIndex('id', tab.id);                if (tab.disabled) return '';                //console.log(tab.items.length);                tab.removeAll();                var action = tab.loadAction;                if (action && 'function' == typeof this[action]) {                    tab.add(this[action]());                    tab.doLayout();                    tab.el.slideIn('r', {                        duration: 0.2                    });                }            }            ,beforetabchange: function(panel, newTab, currentTab) {                if (newTab.disabled && panel.activeTab !== undefined) {                    currentTab.el.slideOut('t', {                        duration: 0.2                    });                }            }            ,scope: this        }    });    CronManager.panel.BaseTabPanel.superclass.constructor.call(this, config);};Ext.extend(CronManager.panel.BaseTabPanel, Ext.TabPanel, {    /**     * "false" close tab     */    closePanel: function() {        this.setActiveTab(0);    }});CronManager.panel.GridEditPanel = function(config) {    config = config || {};    Ext.applyIf(config, {        baseCls: 'modx-formpanel'        ,labelAlign: 'top'        ,anchor: '100%'        ,bbar: new Ext.Toolbar({            cls: 'panel-bottom-toolbar'            ,defaultType: 'button'            ,items: []        })    });    CronManager.panel.GridEditPanel.superclass.constructor.call(this, config);};Ext.extend(CronManager.panel.GridEditPanel, MODx.FormPanel, {});// "Real" content/** * Cron jobs grid * * @class CronManager.grid.CronJobs * @extends MODx.grid.Grid * @param config * @xtype cronmanager-grid-cronjobs */CronManager.grid.CronJobs = function(config) {    config = config || {};    this.snippetTpl = new Ext.XTemplate(        '<div><ul><li>{snippet_name}</li>'        ,'<tpl if="snippet_description"><li><i><small>{snippet_description}</small></i></li></tpl>'        ,'</ul></div>'    );    config.rowContent = new Ext.ux.grid.RowPanelExpander({        expandOnDblClick: false        ,createExpandingRowPanelItems: function(record, rowIndex) {            return [                new CronManager.panel.JobPanel({                    grid: this.grid                    ,record: record                    ,rowIndex: rowIndex                })            ];        }    });    Ext.applyIf(config, {        url: CronManager.config.connectorUrl        ,baseParams: {            action: 'mgr/cronjobs/getList'        }        ,id: 'cronmanager-grid-cronjobs'        ,progressBars: []        ,fields: ['id', 'snippet', 'snippet_name', 'properties', 'minutes', 'nextrun', 'lastrun', 'active', 'sortorder'                ,'snippet_description', 'logs', 'logs_error', 'nextrun_seconds'/*, 'elapsed', 'elapsed_ratio'*/]        ,autoExpandColumn: 'snippet'        ,emptyText: _('cronmanager.norecords')        ,columns: [config.rowContent,{            header: _('id')            ,dataIndex: 'id'            ,sortable: true            ,hidden: true        },{            header: _('cronmanager.snippet')            ,dataIndex: 'snippet_name'            ,sortable: true            ,renderer: function(value, meta, record) {                return this.snippetTpl.apply(record.data);            }            ,scope: this        },{            header: _('cronmanager.logs_entries')            ,dataIndex: 'logs'            ,fixed: true            ,menuDisabled: true            ,renderer: this.renderLogs            ,align: 'right'        },{            header: _('cronmanager.nextrun')            ,renderer: this.renderBar            ,fixed: true            ,menuDisabled: true            ,width: 220        }],        tbar:[{            text: _('cronmanager.create')            ,handler: function() {                this.homePanel.switchTab(1);            }            ,scope: this        }]    });    CronManager.grid.CronJobs.superclass.constructor.call(this, config);    this.getStore().on('load', function(store, records, options) {        this.setProgressBars(store, records, options);        this.collapseTrigger();    }, this);};Ext.extend(CronManager.grid.CronJobs, CronManager.grid.AbstractGrid, {    /**     * Load the progress bars     */    setProgressBars: function(store, records, options) {        if (records.length > 0) {            Ext.each(records, function(record, idx, array) {                //console.log(record.id);//                if (this.progressBars[record.id]) {//                    console.log('bar found');//                    console.log(this.progressBars[record.id]);//                    this.progressBars[record.id].destroy();//                    this.progressBars[record.id] = null;//                }                this.progressBars[record.id] = new Ext.ProgressBar({                    renderTo: 'bar-' + record.id                    ,text: this.setTextBar(record.data)                    ,disabled: !(record.data.active)                });                if (record.data.nextrun_seconds > 0 && record.data.active) {                    this.runBar(this.progressBars[record.id], record);                }            }, this);        }    }    /**     * Define the default text displyed within progress bars     */    ,setTextBar: function(data) {        if (!data.active) {            var text = _('cronmanager.inactive');        } else if (data.nextrun_seconds > 0) {            text = '';        } else if (data.nextrun_seconds <= 0) {            text = _('cronmanager.running');        }        return text;    }    /**     * Animate the progress bar     */    ,runBar: function(bar, record) {        var duration = record.data.nextrun_seconds * 1000            ,interval = 200            //,ratio = record.data.elapsed_ratio            ,me = this;       // bar.updateProgress(ratio);        bar.wait({            interval: interval            ,duration: duration            ,increment: (duration / interval)            ,animate: true            ,fn: function() {                //console.log('done');                bar.updateProgress(1, _('cronmanager.running'), true);                Ext.defer(function() {                    bar.updateProgress(1, _('cronmanager.running'));                }, 1000);//                Ext.defer(function() {//                    me.refresh();//                }, 2000);            }            //,scope: bar        });        bar.on('update', function(cmp, value) {//            console.log(value);//            cmp.value = value + record.data.elapsed_ratio;            if (value == 1) {                bar.updateText(_('cronmanager.running'));                return '';            }            duration = duration - interval;            var seconds = ~~(duration / 1000)                ,display = _('cronmanager.nextrun') +' : ';            if (seconds < 61) {                display +=  seconds +' sec.';            } else {                display += (seconds / 60).toFixed(2) +' min.';            }            bar.updateText(display);        });    }    /**     * Renderer for the progress bar columns     */    ,renderBar: function(value, meta, record) {        return '<div><ul><li>'+ _('cronmanager.lastrun') +' : <span style="float: right">'+ record.data.lastrun +'</span></li><li id="bar-'+ record.id +'"></li></ul></div>';    }    /**     * Renderer for the "logs" column     */    ,renderLogs: function(value, meta, record, idx, colIdx, store) {        return '<div><ul><li>'+ _('cronmanager.logs_total') +' : '+ value +'</li><li>'+ _('cronmanager.logs_errors') +' : <span'+ (record.data.logs_error > 0 ? ' class="red"' : '') +'>'+ record.data.logs_error +'</span></li></ul></div>';    }});Ext.reg('cronmanager-grid-cronjobs', CronManager.grid.CronJobs);CronManager.panel.JobPanel = function(config) {    config = config || {};    Ext.applyIf(config, {        panels: [{            title: _('cronmanager.update')            ,loadAction: 'showEditPanel'            ,iconCls:'glyph_edit'        },{            title: _('cronmanager.viewlog')            ,loadAction: 'showLogPanel'            ,iconCls: 'glyph_logs'        },{            title: _('cronmanager.run_now')            ,loadAction: 'showRunPanel'            ,iconCls: 'glyph_run'        },{            title: _('cronmanager.remove')            ,loadAction: 'showRemovePanel'            ,iconCls: 'glyph_remove'        }]    });    CronManager.panel.JobPanel.superclass.constructor.call(this, config);    this.on('tabchange', function(elem, tab) {        //console.log(tab);        if (tab.loadAction == 'showEditPanel') {            //console.log('update record!');            var record = this.grid.getStore().getById(this.record.id);            tab.items.get(0).getForm().setValues(record.data);        }    }, this);};Ext.extend(CronManager.panel.JobPanel, CronManager.panel.BaseTabPanel, {    showEditPanel: function() {        return new CronManager.panel.EditCron({            record: this.record            ,grid: this.grid            ,tabPanel: this        });    }    // Logs panel    ,showLogPanel: function() {        if (this.record.data.logs <= 0) {            var items = {                html: _('cronmanager.log_none')                ,border: false            };        } else {            items = {                xtype: 'panel'                ,layout: 'card'                ,activeItem: 0                ,id: 'cronlogs-cardpanel-' + this.record.id                ,items: [{                    xtype: 'cronmanager-grid-cronjoblog'                    ,baseParams: {                        action: 'mgr/cronjobs/getlog'                        ,cronid: this.record.id                    }                    ,record: this.record                    ,id: 'cronlogs-' + this.record.id                    ,cls: 'content_grid'                    ,tabPanel: this                },{                    xtype: 'panel'                    ,forceLayout: true                    ,layout: 'form'                    ,baseCls: 'modx-formpanel'                    ,labelAlign: 'top'                    ,id: 'log-display-' + this.record.id                    ,defaults: {                        anchor: '100%'                    }                    ,items: [{                        border: false                    },{                        xtype: 'textarea'                        ,fieldLabel: 'Message'                        ,grow: true                        ,readOnly: true                        ,cls: 'x-form-text modx-console-text'                    }]                    ,bbar: new Ext.Toolbar({                        cls: 'panel-bottom-toolbar'                        ,defaultType: 'button'                        ,items: ['->',{                            text: _('back')                            ,cls: 'green'                            ,handler: function() {                                var panel = Ext.getCmp('cronlogs-cardpanel-' + this.record.id);                                panel.getLayout().setActiveItem(0);                                panel.items.get(0).el.slideIn('b', {                                    duration: .2                                });                            }                            ,scope: this                        },'-',{                            text: _('cronmanager.cancel')                            ,handler: function() {                                this.closePanel();                            }                            ,scope: this                        }]                    })                }]            };        }        var panel = new MODx.Panel({            layout: 'anchor'            ,tabPanel: this            ,items: [{                html: '<h3>'+ _('cronmanager.logs_title', {job: this.record.data.snippet_name}) +'</h3>'                ,border: false            },{                html: _('cronmanager.logs_desc')                ,border: false            },{                xtype: 'panel'                ,layout: 'anchor'                ,style: {                    marginTop: '40px'                }                ,items: [items]            }]        });        return panel;    }    // Run cron job panel    ,showRunPanel: function() {        return new MODx.Panel({            layout: 'anchor'            ,tabPanel: this            ,items: [{                html: '<h3>'+ _('cronmanager.run_now_title', {job: this.record.data.snippet_name}) +'</h3>'                ,border: false            },{                html: _('cronmanager.run_now_desc')                ,border: false            },{                xtype: 'toolbar'                ,cls: 'panel-bottom-toolbar'                ,defaultType: 'button'                ,items: ['->',{                    text: _('cronmanager.execute')                    ,cls: 'green'                    ,handler: function() {                        var mask = new Ext.LoadMask(                            this.el                            ,{                                msg: _('cronmanager.wait')                                ,removeMask: true                            }                        );                        mask.show();                        // Execute the selected job                        var exec = MODx.Ajax;                        exec.request({                            url: CronManager.config.connectorUrl                            ,timeout: 0                            ,params: {                                action: 'mgr/cronjobs/process'                                ,id: this.record.id                            }                        });                        exec.on('success', function(r) {                            this.record.data = r.object;                            this.record.commit();                           mask.hide();                        }, this);                    }                    ,scope: this                },'-',{                    text: _('cronmanager.cancel')                    ,handler: function() {                        this.closePanel();                    }                    ,scope: this                }]            }]        });    }    ,showRemovePanel: function() {        return new MODx.Panel({            layout: 'anchor'            ,tabPanel: this            ,items: [{                html: '<h3>'+ _('cronmanager.remove_title', {job: this.record.data.snippet_name}) +'</h3>'                ,border: false            },{                html: _('cronmanager.remove_desc')                ,border: false            },{                xtype: 'toolbar'                ,cls: 'panel-bottom-toolbar'                ,defaultType: 'button'                ,items: ['->',{                    text: _('cronmanager.remove')                    ,handler: function() {                        var mask = new Ext.LoadMask(                            this.el                            ,{                                msg: _('cronmanager_wait')                                ,removeMask: true                            }                        );                        mask.show();                        // Execute the selected job                        var exec = MODx.Ajax;                        exec.request({                            url: CronManager.config.connectorUrl                            ,params: {                                action: 'mgr/cronjobs/remove'                                ,id: this.record.id                            }                        });                        exec.on('success', function(r) {                            this.grid.refresh();                            mask.hide();                        }, this);                    }                    ,scope: this                },'-',{                    text: _('cronmanager.cancel')                    ,cls: 'green'                    ,handler: function() {                        this.closePanel();                    }                    ,scope: this                }]            }]        });    }});CronManager.panel.EditCron = function(config) {    config = config || {};    Ext.applyIf(config, {        url: CronManager.config.connectorUrl        ,baseParams: {            action: 'mgr/cronjobs/update'        }        ,items: [{            html: '<h3>' + (config.record ? _('cronmanager.update_title', {job: config.record.data.snippet_name}) : _('cronmanager.create_title')) + '</h3>'            ,border: false        },{            html: (config.record ? _('cronmanager.update_desc') : _('cronmanager.create_desc'))            ,border: false        },{            layout: 'column'            ,style: {                marginTop: '40px'            }            ,items: [{                columnWidth: .67                ,layout: 'form'                ,border: false                ,defaults: {                    msgTarget: 'under'                    ,allowBlank: false                    ,anchor: '100%'                }                ,items: [{                    xtype: 'hidden'                    ,name: 'id'                },{                    xtype: 'cronmanager-combo-snippets'                    ,fieldLabel: _('cronmanager.snippet')                    ,name: 'snippet'                },{                    xtype: 'textarea'                    ,fieldLabel: _('cronmanager.properties')                    ,description: _('cronmanager.properties_desc')                    ,name: 'properties'                    ,allowBlank: true                    ,grow: true                }]            },{                columnWidth: .33                ,layout: 'form'                ,labelWidth: 0                ,border: false                ,style: 'margin-right: 0'                ,defaults: {                    msgTarget: 'under'                    ,anchor: '100%'                }                ,items: [{                    xtype: 'xdatetime'                    ,fieldLabel: _('cronmanager.nextrun')                    ,name: 'nextrun'                },{                    xtype: 'combo-boolean'                    ,fieldLabel: _('cronmanager.active')                    ,name: 'active'                    ,listWidth: false                },{                    xtype: 'numberfield'                    ,fieldLabel: _('cronmanager.minutes')                    ,description: _('cronmanager.minutes_desc')                    ,name: 'minutes'                    ,width: 60                    ,value: 60                    ,minValue: 1                    ,allowNegative: false                    ,allowBlank: false                    ,maxValue: 999999                }]            }]        }]        ,bbar: new Ext.Toolbar({            cls: 'panel-bottom-toolbar'            ,defaultType: 'button'            ,items: ['->', {                text: _('save')                ,cls: 'green'                ,handler: function() {                    this.submit();                }                ,scope: this            },'-',{                text: _('cronmanager.cancel')                ,handler: function() {                    this.tabPanel.setActiveTab(0);                }                ,scope: this            }]        })        ,listeners: {            /*setup: function() {                this.getForm().setValues(this.record.data);            }            ,*/success: function(r) {//                var idx = this.tabPanel.activeTabIdx;////                if (idx) {//                    this.grid.getStore().on('update', function() {//                        console.log('store update');//                        console.log(idx);//                        console.log(this.grid.rowContent.expandingRowPanel[this.record.id].items[0]);//                        this.grid.rowContent.on('expand', function() {//                            console.log('expand after update');//                            this.tabPanel.setActiveTab(idx);//                        }, this);//                    }, this);//                }                this.record.data = r.result.object;                this.record.commit();                //this.grid.refresh();                //this.grid.getView().refresh();            }            ,scope: this        }    });    CronManager.panel.EditCron.superclass.constructor.call(this, config);};Ext.extend(CronManager.panel.EditCron, CronManager.panel.GridEditPanel, {});Ext.reg('cronmanager-panel-edit', CronManager.panel.EditCron);